package com.cw.plm.updatertu;

import java.nio.ByteBuffer;

import com.hzjbbis.fk.message.gw.MessageGw;

public class RtuStatus {
	private RtuStatusData data = new RtuStatusData(null, 0, 0, System.currentTimeMillis());

	public RtuStatus(String bNo,int rtu, ByteBuffer buf){
		data.batchId = bNo;
		this.data.rtua = rtu;
		data.buffer = buf;
		data.total = buf.remaining() / packetLength;
		if( buf.remaining() % packetLength != 0 )
			data.total++;
	}
	
	public String getBatchId(){
		return data.batchId;
	}
	
	public int getRtua(){
		return data.rtua;
	}
	
	public int getCurPacket(){
		return data.iPacket;
	}
	
	public int getTotalPacket(){
		return data.total;
	}
	
	public boolean isLastPacket(){
		return (data.iPacket+1) == data.total;
	}
	
	public long getLastTime(){
		return data.lastTime;
	}
	
	public void setLastTime(long time){
		data.lastTime = time;
	}
	
	public void move(){		//如果收到上次下行的确认帧，那么前进1步
		data.iPacket++;
	}
	
	public MessageGw nextPacket(){
		int fl = packetLength;
		if( (data.iPacket+1) == data.total ){	//最后一段
			if( data.buffer.remaining() % packetLength !=0 )
				fl = data.buffer.remaining() % packetLength;
		}
		//4字节数据单元标识 ＋ 数据单元
		ByteBuffer data = ByteBuffer.allocate(4+11+fl);
		byte czero = 0, cone = 1;
		data.put(czero); data.put(czero);
		data.put(cone);
		data.put(czero);
		data.put(cone);		//文件标识
		if( (data.iPacket+1) == data.total )	//结束帧
			data.put(cone);
		else
			data.put(czero);
		data.put(czero);		//文件指令
		//总段数
		byte c;
		c = (byte)(data.total & 0x00FF) ;
		data.put(c);
		c = (byte)( (data.total>>8) & 0x00FF );
		data.put(c);
		//第i段标识
		c = (byte)(data.iPacket & 0x00FF) ;
		data.put(c);
		c = (byte)( (data.iPacket>>8) & 0x00FF );
		data.put(c);
		c = (byte)( (data.iPacket>>16) & 0x00FF );
		data.put(c);
		c = (byte)( (data.iPacket>>24) & 0x00FF );
		data.put(c);
		//第i段数据长度Lf
		c = (byte)(fl & 0x00FF) ;
		data.put(c);
		c = (byte)( (fl>>8) & 0x00FF );
		data.put(c);
		//文件数据
		int offset = data.iPacket * packetLength;
		for(int i=0; i<fl; i++ ){
			data.put(data.buffer.get(offset+i));
		}
		data.flip();
		MessageGw msg = new MessageGw();
		msg.data = data;
		msg.head.rtua = data.rtua;
		msg.setAFN(MessageConst.GW_FUNC_FILE);
		msg.setSEQ((byte)(data.iPacket+1));
		msg.needConfirm(true);
		return msg;
	}
}
