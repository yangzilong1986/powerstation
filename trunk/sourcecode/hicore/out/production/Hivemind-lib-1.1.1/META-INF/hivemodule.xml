<?xml version="1.0"?>
<!-- 
   Copyright 2004, 2005 The Apache Software Foundation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<module id="hivemind.lib" version="1.1.0" package="org.apache.hivemind.lib">
  
  Standard library for HiveMind, providing commonly used services.
    
  <service-point id="RemoteExceptionCoordinator">
    
    Used to coordinate propogation of remote exceptions (typically, to allow cached remote data to be discarded after a remote exception).
      
    <create-instance class="impl.RemoteExceptionCoordinatorImpl" model="primitive"/>
  </service-point>
    
  <service-point id="NameLookup">
    
    A service which can perform name lookups of objects using JNDI.
    <invoke-factory>
      <construct class="impl.NameLookupImpl">
        <set property="initialFactory" value="${java.naming.factory.initial}"/>
        <set property="URLPackages" value="${java.naming.factory.url.pkgs}"/>
        <set property="providerURL" value="${java.naming.provider.url}"/>
        <set-service property="coordinator" service-id="RemoteExceptionCoordinator"/>
        <event-listener service-id="RemoteExceptionCoordinator"/>
      </construct>
    </invoke-factory>
  </service-point>
  
  <contribution configuration-id="hivemind.FactoryDefaults">
    <default symbol="java.naming.factory.initial" value=""/>
    <default symbol="java.naming.factory.url.pkgs" value=""/>
    <default symbol="java.naming.provider.url" value=""/>
  </contribution>
  
  <service-point id="EJBProxyFactory" interface="org.apache.hivemind.ServiceImplementationFactory">
    
    Core service implementation factory that constructs dynamic proxies to EJB stateless session beans. Factory parameters are used to specify the JNDI name of the EJB and the name of its home interface.
    
    <parameters-schema>
      <element name="construct">
        
        Specifies parameters needed to construct the EJB Proxy.
        
        <attribute name="jndi-name" required="true">
        The JNDI Name of the EJB's home interface.
        </attribute>
        <attribute name="home-interface" required="true">
        Complete name of the EJB's home interface.  The service interface must be the remote interface.
        </attribute>
        <attribute name="name-lookup-service-id" translator="service">
        Defines an alternate name lookup service to use when resolving JNDI names to EJB home interfaces. 
        If not specified, the default service hivemind.NameLookup is used.
        </attribute>
        <conversion class="impl.EJBProxyParameters">
        <map attribute="jndi-name" property="jndiName"/>
        <map attribute="home-interface" property="homeInterfaceClassName"/>
        <map attribute="name-lookup-service-id" property="nameLookup"/>
        </conversion>
      </element>
    </parameters-schema>
    
    <invoke-factory>
      <construct class="impl.EJBProxyFactory">
        <set-service property="nameLookup" service-id="NameLookup"/>
        <set-service property="classFactory" service-id="hivemind.ClassFactory"/>
        <set-service property="coordinator" service-id="RemoteExceptionCoordinator"/>
      </construct>
    </invoke-factory>
  </service-point>
  
  <service-point id="SpringLookupFactory" interface="org.apache.hivemind.ServiceImplementationFactory">
    
    A service implementation factory that obtains service implementations from a Spring BeanFactory.
      
    <parameters-schema>
      
      Parameters are used to specify the bean name and, optionally, a non-default Spring
      BeanFactory from which to obtain the bean.
      
      <element name="lookup-bean">
        <attribute name="name" required="true">
          The name of the Spring bean to obtain.
        </attribute>
        <attribute name="bean-factory" translator="object">
          An optional object implementing the Spring BeanFactory interface.  The default,
          when not specified, is hivemind.lib.DefaultSpringBeanFactory.
        </attribute>
        <conversion class="impl.SpringBeanParameter"/>
      </element>
    </parameters-schema>
    <invoke-factory>
      <construct
        class="impl.SpringLookupFactory">
        <set-service property="defaultBeanFactory" service-id="DefaultSpringBeanFactory"/>
      </construct>
    </invoke-factory>
  </service-point>
  
  <service-point id="DefaultSpringBeanFactoryHolder" interface="SpringBeanFactoryHolder">
    
    Default source for Spring BeanFactories.  External code can inject a BeanFactory here, where 
    it is available to the SpringLookupFactory service.
      
    <create-instance class="impl.SpringBeanFactoryHolderImpl"/>
  </service-point>
  
  <service-point id="DefaultSpringBeanFactory" interface="org.springframework.beans.factory.BeanFactory">
    
    The default Spring BeanFactory referenced by the SpringLookupFactory. This is a projection of the BeanFactory
    held by the DefaultSpringBeanFactoryHolder service.
    
    <invoke-factory service-id="ServicePropertyFactory">
      <construct service-id="DefaultSpringBeanFactoryHolder" property="beanFactory"/>
    </invoke-factory>
    
  </service-point>

  <service-point id="SpringObjectProvider" interface="org.apache.hivemind.service.ObjectProvider">
    
    Provides the "spring:" prefix, which looks up Spring beans in a Spring BeanFactory.
    
    <invoke-factory>
      <construct class="impl.SpringObjectProvider">
        <set-object property="beanFactory" value="${hivemind.lib.spring-bean-factory}"/>
      </construct>
    </invoke-factory>
    
  </service-point>

  <contribution configuration-id="hivemind.FactoryDefaults">
    <default symbol="hivemind.lib.spring-bean-factory" value="service:DefaultSpringBeanFactory"/>
  </contribution>
  
  <contribution configuration-id="hivemind.ObjectProviders">
    <provider prefix="spring" service-id="SpringObjectProvider"/>
  </contribution>
  
  <schema id="BeanFactoryContribution">
    Schema used with the hivemind.lib.BeanFactoryBuilder service, to define configuration that accepts definitions of classes 
    that may be vended by the generated BeanFactory.
      
    <element name="bean">
      Define one class of bean that may be vended.  Beans must have either a public constructor that takes no arguments, 
      or a public constructor that takes a single string argument (or both).
      <attribute name="name" required="true" unique="true">A unique name for the bean.</attribute>
      <attribute name="class" required="true" translator="class">The bean class that will be instantiated by the factory.</attribute>
      <attribute name="cacheable" translator="boolean">Defines whether instances of the bean may be cached; the default is specified by the factory.</attribute>
      <conversion class="factory.BeanFactoryContribution">
        <map attribute="class" property="beanClass"/>
      </conversion>
    </element>
  </schema>
  
  <service-point id="BeanFactoryBuilder" interface="org.apache.hivemind.ServiceImplementationFactory">
    
    A service which builds Object Factories.  Factories are driven by a configuration that conforms to the hivemind.lib.BeanFactoryContribution schema.<parameters-schema>
    <element name="factory">
        <attribute name="vend-class" translator="class">The class (or interface) vended by this factory. Contributions must be assignable to this type, or will be ignored. The default value is java.lang.Object.</attribute>
        <attribute name="default-cacheable" translator="boolean">The default value for cacheable for any contributions that are not more specific. The default value is true.</attribute>
        <attribute name="configuration-id" required="true" translator="configuration">The configuration containing the contributions that define what classes are actually vended. The configuration must use the hivemind.lib.BeanFactoryContribution schema.</attribute>
        <conversion class="factory.BeanFactoryParameter">
          <map attribute="configuration-id" property="contributions"/>
        </conversion>
      </element>
    </parameters-schema>
    <invoke-factory>
      <construct class="factory.BeanFactoryBuilder"/>
    </invoke-factory>
  </service-point>
  
  <service-point id="BeanFactoryObjectProvider" interface="org.apache.hivemind.service.ObjectProvider" visibility="private">
    
    Provides the bean: object provider prefix.
      
    <create-instance class="factory.BeanFactoryObjectProvider"/>
  </service-point>
  
  <contribution configuration-id="hivemind.ObjectProviders">
    <provider prefix="bean" service-id="BeanFactoryObjectProvider"/>
  </contribution>
  
  <service-point id="DefaultImplementationBuilder">
    
    A service which can create a default implementation of an arbitrary interface. The instance returned does nothing. 
    Returned instances are cached and re-used.
      
    <invoke-factory>
      <construct class="impl.DefaultImplementationBuilderImpl">
        <set-service property="classFactory" service-id="hivemind.ClassFactory"/>
      </construct>
    </invoke-factory>
  </service-point>
  
  <service-point id="PlaceholderFactory" 
    interface="org.apache.hivemind.ServiceImplementationFactory" 
    parameters-occurs="none">
    
    A service implementation factory that builds a default implementation of a service. 
    The service implementation is a placeholder that does nothing.
      
    <invoke-factory>
      <construct class="impl.PlaceholderFactory">
        <set-service property="builder" service-id="DefaultImplementationBuilder"/>
      </construct>
    </invoke-factory>
  </service-point>
  
  <service-point id="PipelineFactory" interface="org.apache.hivemind.ServiceImplementationFactory">
    
    A service implementation factory that assembles a pipeline of filters into a service.
      
    <parameters-schema>
      
      Provides the factory with the filter interface that complements the service interface, 
      the configuration data used to construct the pipeline and optionally, 
      a terminator service for the pipeline.
        
      <element name="create-pipeline">
        <attribute name="filter-interface" required="true" translator="class">
          The filter interface should have the same methods as the service interface, 
          with an additional parameter for each method with the same type as the service interface.
        </attribute>
        <attribute name="configuration-id" required="true" translator="configuration">
          A configuration used to identify the filters (and optionally, the terminator) for the pipeline.  
          The configuration should use the Pipeline schema.
        </attribute>
        <attribute name="terminator" translator="object">
          Optional terminator.  May also be provided in the configuration. 
          If in neither, a placeholder is provided.
        </attribute>
        <conversion class="pipeline.PipelineParameters">
          <map attribute="configuration-id" property="pipelineConfiguration"/>
        </conversion>
      </element>
    </parameters-schema>
    
    <invoke-factory>
      <construct class="pipeline.PipelineFactory">
        <set-service property="classFactory" service-id="hivemind.ClassFactory"/>
        <set-service property="defaultImplementationBuilder" service-id="DefaultImplementationBuilder"/>
      </construct>
    </invoke-factory>
  </service-point>
  
  <schema id="Pipeline">
    Used with the PipelineFactory to define the filters and optional terminator for a pipeline.
    
    <element name="filter">
      Defines a filter in terms of an object.
        
      <attribute name="name" required="true" translator="qualified-id">
        A name for the filter that is used when setting the order of the filters.
      </attribute>
      <attribute name="object" required="true" translator="object">The object to act as a filter.</attribute>
      <attribute name="before" translator="id-list">A list of ids of other contributed filters that should precede this filter in the pipeline.</attribute>
      <attribute name="after" translator="id-list">A list of ids of other contributed filters that should follow this filter in the pipeline.</attribute>
      <conversion class="pipeline.FilterContribution">
        <map attribute="object" property="filter"/>
      </conversion>
    </element>
   
    <element name="terminator">
      An object, implementing the pipeline's service interface, 
      that is invoked by the final filter in the pipeline.
      
      <attribute name="object" required="true" translator="object"/>
      <conversion class="pipeline.TerminatorContribution">
        <map attribute="object" property="terminator"/>
      </conversion>
    </element>
  </schema>
  
  <service-point id="ServicePropertyFactory" interface="org.apache.hivemind.ServiceImplementationFactory">
    
    Creates a service that dynamically (i.e., on each service method invocation) obtains a property
    from another service and forwards the invocation to the property.  The property must be
    the same type (or assignable to) the constructed service's interface. Typically,
    the targeted service uses a threaded (or similar) service model, thus requiring dynamic,
    rather than static, access.
    
    <invoke-factory>
      <construct class="impl.ServicePropertyFactory">
      <set-service property="classFactory" service-id="hivemind.ClassFactory"/>
      </construct>    
    </invoke-factory>
    
    <parameters-schema>
    <element name="construct">
      
      <attribute name="service-id" required="true" translator="service">
      
      The service which contains the property.
      
      </attribute>
      
      <attribute name="property" required="true">
      
      The name of the property of the target service to expose.
      </attribute>
      
      <conversion class="impl.ServicePropertyFactoryParameter">
      <map attribute="service-id" property="service"/>
      <map attribute="property" property="propertyName"/>
      </conversion>
      
    </element>
    </parameters-schema>
    
  </service-point>
  
  
  <schema id="StrategyRegistry">
    
    Used with the hivemind.lib.StrategyFactory to define a set of classes and corresponding
    strategies
    
    <element name="strategy">
      
      <attribute name="class" translator="class" required="true">
        The class (or interface) to register the stategy against.
      </attribute>
      
      <attribute name="object" translator="object" required="true">
        The stategy instance that corresponds to objects of the given class.
      </attribute>
      
      <conversion class="strategy.StrategyContribution">
        <map attribute="class" property="registerClass"/>
        <map attribute="object" property="strategy"/>
      </conversion>
      
    </element>
    
  </schema>
  
  <service-point id="StrategyFactory" interface="org.apache.hivemind.ServiceImplementationFactory">
    
    Creates a service as a wrapper around a StrategyRegistry.  The first parameter to
    each method of the service interface is used to select a strategy instance, and then
    the method implementation delegates to that instance.
    
    <invoke-factory>
      <construct class="strategy.StrategyFactory">
        <set-service property="classFactory" service-id="hivemind.ClassFactory"/>
      </construct>
    </invoke-factory>
    
    <parameters-schema>
      <element name="construct">
        <attribute name="configuration-id" translator="configuration" required="true">
          A configuration utilizing the hivemind.lib.StrategyRegistry schema, which
          defines the classes and matching strategies.
        </attribute>
        
        <conversion class="strategy.StrategyParameter">
          <map attribute="configuration-id" property="contributions"/>
        </conversion>
      </element>
    </parameters-schema>
    
  </service-point>
  
  <service-point id="ChainBuilder" interface="org.apache.hivemind.lib.chain.ChainBuilder">
    
    Constructs an Gang of Four Chain of Command implementation
    for an interface, and a list of objects
    implementing that interface.  Primarily used
    by the ChainFactory service implementation factory.
    
    <invoke-factory>
      <construct class="chain.ChainBuilderImpl">
        <set-service property="classFactory" service-id="hivemind.ClassFactory"/>
      </construct>
    </invoke-factory>
    
  </service-point>
  
  <schema id="ChainContribution">
    
    Contribution used to set up a chain of commands for use with ChainFactory.
    
    <element name="command">
      <attribute name="id" unique="true" required="true" translator="qualified-id">
        An id for the command, which is used when ordering the commands.
      </attribute>
      <attribute name="before" translator="id-list">
        List of command ids which should be processed after this command.
      </attribute>
      <attribute name="after" translator="id-list">
        List of command ids which should be processed before this command.
      </attribute>
      <attribute name="object" translator="object" required="true">
        The object implementing the command interface.
      </attribute>
      
      <conversion class="chain.ChainContribution">
        <map attribute="object" property="command"/>
      </conversion>
    </element>
    
  </schema>
  
  <service-point id="ChainFactory" interface="org.apache.hivemind.ServiceImplementationFactory">
    
    Service implementation factory that produces a chain of command based on a 
    configuration point that conforms tothe hivemind.lib.ChainContribution schema.
    
    <invoke-factory>
      <construct class="chain.ChainFactory">
        <set-service property="chainBuilder" service-id="ChainBuilder"/>
      </construct>
    </invoke-factory>
    
    <parameters-schema>
      <element name="construct">
        <attribute name="configuration-id" required="true" translator="configuration">
          The configuration (conforming to the ChainContribution schema).
        </attribute>
    
        <rules>
          <push-attribute attribute="configuration-id"/>
          <invoke-parent method="addElement"/>
        </rules>
        
      </element>
    </parameters-schema>
    
  </service-point>
  <service-point id="MethodInterceptorFactory" parameters-occurs="1" interface="org.apache.hivemind.ServiceInterceptorFactory">
    <invoke-factory>
      <construct class="org.apache.hivemind.lib.impl.MethodInterceptorFactory" />
    </invoke-factory>
    
    <parameters-schema>
      <element name="impl">
        <attribute name="object" required="true" translator="object">
          The implementation object which implements the MethodInterceptor interface.
        </attribute>

		<rules>
		  <push-attribute attribute="object" />
		  <invoke-parent method="addElement" />
		</rules>
      </element>
    </parameters-schema>
  </service-point>
</module>
