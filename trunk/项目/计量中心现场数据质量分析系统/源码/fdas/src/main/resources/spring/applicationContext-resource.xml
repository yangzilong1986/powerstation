<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
  default-autowire="byName" default-lazy-init="false">

  <!-- 属性文件读入,使用rapid中的JdbcPlaceholderConfigurer则可以从数据库读取配置信息 -->
  <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="locations">
      <list>
        <value>classpath*:application.properties</value>
      </list>
    </property>
  </bean>
  <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
    <property name="basenames">
      <list>
        <value>i18n/messages</value>
        <value>i18n/application_archive</value>
        <value>i18n/application_synquery</value>
        <value>i18n/application_system</value>
      </list>
    </property>
  </bean>

  <!-- 数据源定义,使用Apache DBCP 连接池 -->
  <!--  <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
    <property name="driverClassName" value="${jdbc.driver}" />
    <property name="url" value="${jdbc.url}" />
    <property name="username" value="${jdbc.username}" />
    <property name="password" value="${jdbc.password}" />
    <property name="initialSize" value="${dbcp.initialSize}"></property>
    <property name="maxActive" value="${dbcp.maxActive}"></property>
    <property name="maxIdle" value="${dbcp.maxIdle}"></property>
  </bean>-->
  
    <!-- 数据源定义,使用C3P0连接池 -->
  	<bean id="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driver}"></property>
		<property name="jdbcUrl" value="${jdbc.url}"></property>
		<property name="user" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="acquireIncrement" value="${c3p0.acquireIncrement}"></property>
		<property name="initialPoolSize" value="${c3p0.initialPoolSize}"></property>
		<property name="maxIdleTime" value="${c3p0.maxIdleTime}"></property>
		<property name="maxPoolSize" value="${c3p0.maxPoolSize}"></property>
		<property name="minPoolSize" value="${c3p0.minPoolSize}"></property>
		<property name="acquireRetryDelay" value="1000"></property>
		<property name="acquireRetryAttempts" value="60"></property>
		<property name="breakAfterAcquireFailure" value="false"></property>
	</bean>

  <!--
    <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> <property
    name="jndiName"><value>java:comp/env/jdbc/ds</value></property> </bean> <bean id="dataSource"
    class="cn.org.rapid_framework.test.hsql.HSQLMemDataSourceFactoryBean"> <property name="encoding" value="UTF-8"/>
    <property name="sqlScript"> <value> CREATE TABLE user_info ( user_id bigint IDENTITY PRIMARY KEY, username
    varchar(50) , password varchar(50) , birth_date TIMESTAMP , sex tinyint , age int ); insert into user_info values
    (1,'badqiu','123',null,1,2); insert into user_info values (2,'rapid-framework','123',null,1,2); insert into
    user_info values (3,'test','123',null,1,2); </value> </property> </bean>
  -->

  <!-- 支持 @Transactional 标记 -->
  <!--	<tx:annotation-driven/>-->

  <!-- 支持 @AspectJ 标记-->
  <!--	<aop:aspectj-autoproxy/>-->

  <!-- 以AspectJ方式 定义 AOP -->
  <aop:config proxy-target-class="true">
    <aop:advisor pointcut="execution(* org.pssframework.base.BaseManager.*(..))" advice-ref="txAdvice" />
    <aop:advisor pointcut="execution(* org.*.service.*.*Manager.*(..))" advice-ref="txAdvice" />
  </aop:config>

  <!-- 基本事务定义,使用transactionManager作事务管理,默认get* find*方法的事务为readonly,其余方法按默认设置.
			 默认的设置请参考Spring文档事务一章. -->
  <tx:advice id="txAdvice" transaction-manager="transactionManager">
    <tx:attributes>
      <tx:method name="find*" read-only="true" />
      <tx:method name="get*" read-only="true" />
      <tx:method name="query*" read-only="true" />
      <tx:method name="*" read-only="false" />
    </tx:attributes>
  </tx:advice>

  <!-- 用于持有ApplicationContext,可以使用ApplicationContextHolder.getBean('xxxx')的静态方法得到spring bean对象 -->
  <!-- <bean class="cn.org.rapid_framework.util.ApplicationContextHolder"/> -->
  
  <bean id="ehcacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
    <property name="configLocation" value="classpath:/ehcache/ehcache.xml" />
  </bean>
</beans>